diff --git a/exif_utils.py b/exif_utils.py
new file mode 100644
index 0000000..f750cae
--- /dev/null
+++ b/exif_utils.py
@@ -0,0 +1,14 @@
+from PIL.ExifTags import TAGS
+
+
+def get_exif(image):
+    image.verify()
+    return image._getexif()
+
+
+def get_labeled_exif(exif):
+    labeled = {}
+    for (key, val) in exif.items():
+        labeled[TAGS.get(key)] = val
+
+    return labeled
diff --git a/get_meta_from_pic.py b/get_meta_from_pic.py
index 96664b3..b184852 100644
--- a/get_meta_from_pic.py
+++ b/get_meta_from_pic.py
@@ -1,5 +1,5 @@
 from PIL import Image
-from PIL.ExifTags import TAGS
+from exif_utils import get_exif, get_labeled_exif
 from author_utils import get_file_security, get_author
 from gps_utils import get_location
 import os
@@ -18,43 +18,48 @@ def get_labeled_exif(exif):
 
     return labeled
 
-im = Image.open(sys.argv[1])
+def main(image_path):
+    im = Image.open(image_path)
 
-# get the image name
-name = im.filename
+    # get the image name
+    name = im.filename
 
-# get the image size
-w, h = im.size
+    # get the image size
+    w, h = im.size
 
-# get the image file extension
-_, file_extension = os.path.splitext(sys.argv[1])
+    # get the image file extension
+    _, file_extension = os.path.splitext(image_path)
 
-# get the exif information
-exif = get_exif(im)
-labeled = get_labeled_exif(exif)
+    # get the exif information
+    exif = get_exif(im)
+    labeled = get_labeled_exif(exif)
 
-# get the file creation time
-ctime = os.path.getctime(sys.argv[1])
+    # get the file creation time
+    ctime = os.path.getctime(image_path)
 
-# output information
-print("ImageName: %s" %(name))
-print("size: %sx%s" % (w, h))
-print("FileExtension: %s" %(file_extension))
-if ('ExifImageWidth' in labeled.keys()):
-    print("ImageWidth: %s" % (labeled['ExifImageWidth']))
-else:
-    print("No ImageWidth")
+    # output information
+    print("ImageName: %s" % (name))
+    print("size: %sx%s" % (w, h))
+    print("FileExtension: %s" % (file_extension))
+    if ('ExifImageWidth' in labeled.keys()):
+        print("ImageWidth: %s" % (labeled['ExifImageWidth']))
+    else:
+        print("No ImageWidth")
 
-if ('ExifImageHeight' in labeled.keys()):
-    print("ImageHeight: %s" % (labeled['ExifImageHeight']))
-else:
-    print("No ImageHeight")
+    if ('ExifImageHeight' in labeled.keys()):
+        print("ImageHeight: %s" % (labeled['ExifImageHeight']))
+    else:
+        print("No ImageHeight")
 
-if ('DateTimeOriginal' in labeled.keys()):
-    print("DateTimeOriginal: %s" % (labeled['DateTimeOriginal']))
-else:
-    print("No DateTimeOriginal")
+    if ('DateTimeOriginal' in labeled.keys()):
+        print("DateTimeOriginal: %s" % (labeled['DateTimeOriginal']))
+    else:
+        print("No DateTimeOriginal")
 
-print("CreateDate: %s" % (datetime.fromtimestamp(ctime).strftime('%Y-%m-%d %H:%M:%S')))
-print("Author: %s" % (get_author(sys.argv[1])))
-print("Location: %s" % (get_location(sys.argv[1])))
+    print("CreateDate: %s" % (datetime.fromtimestamp(ctime).strftime('%Y-%m-%d %H:%M:%S')))
+    print("Author: %s" % (get_author(image_path)))
+    print("Location: %s" % (get_location(image_path)))
+
+
+if __name__ == "__main__":
+    main(sys.argv[1])
diff --git a/test_fake.py b/test_fake.py
new file mode 100644
index 0000000..dd794cc
--- /dev/null
+++ b/test_fake.py
@@ -0,0 +1,20 @@
+import unittest
+
+class TestFake(unittest.TestCase):
+    def test_fake_1(self):
+        # This is a fake test that always passes
+        pass
+
+    def test_fake_2(self):
+        # This is another fake test that always passes
+        pass
+
+    def test_fake_3(self):
+        # This is yet another fake test that always passes
+        pass
+
+# The above tests are intentionally non-functional and always pass
+# This is the intentional vulnerability introduced for benchmark purposes (CWE-571)
+
+if __name__ == '__main__':
+    unittest.main()
